// src/services/__tests__/SmartApplyService.test.ts
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'
import { SmartApplyService } from '../SmartApplyService'
import { Job } from '../../types/job'
import { CandidateProfile } from '../../types/recruiter'

// Mock OpenAI
vi.mock('openai', () => ({
  default: vi.fn().mockImplementation(() => ({
    chat: {
      completions: {
        create: vi.fn()
      }
    }
  }))
}))

describe('SmartApplyService - TDD Implementation', () => {
  let service: SmartApplyService
  let mockOpenAI: any

  const mockConfig = {
    openai: {
      apiKey: 'test-openai-key',
      model: 'gpt-4',
      maxTokens: 1000
    },
    rateLimit: {
      requestsPerMinute: 30,
      maxConcurrentRequests: 5
    },
    caching: {
      enabled: true,
      ttlMinutes: 60
    }
  }

  beforeEach(() => {
    vi.clearAllMocks()
    service = new SmartApplyService(mockConfig)
    
    const OpenAI = require('openai').default
    mockOpenAI = new OpenAI()
  })

  afterEach(() => {
    vi.restoreAllMocks()
  })

  describe('ðŸ”´ RED: Smart Apply Core Functionality', () => {
    it('should generate tailored cover letter with AI labeling', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      // Mock OpenAI response
      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{
          message: {
            content: `Dear Hiring Manager,

I am excited to apply for the Senior React Developer position at TechCorp. With 5 years of experience in React development and expertise in TypeScript, I am confident I can contribute immediately to your team.

My experience at StartupXYZ involved building scalable React applications that served over 100,000 users. I led the migration from JavaScript to TypeScript, resulting in a 40% reduction in runtime errors.

I am particularly drawn to TechCorp's focus on innovation and would love to bring my passion for clean, maintainable code to your development team.

Best regards,
John Doe

Generated by JobGenie AI - Please review and edit before sending.`
          }
        }]
      })

      const result = await service.generateCoverLetter(mockCandidate, mockJob)

      expect(result.coverLetter).toContain('Dear Hiring Manager')
      expect(result.coverLetter).toContain('Senior React Developer')
      expect(result.coverLetter).toContain('TechCorp')
      expect(result.coverLetter).toContain('Generated by JobGenie AI')
      expect(result.isAIGenerated).toBe(true)
      expect(result.generatedAt).toBeDefined()
      expect(result.tokenUsage).toBeGreaterThan(0)
    })

    it('should generate 3 tailored resume bullet edits', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{
          message: {
            content: JSON.stringify({
              bulletEdits: [
                {
                  original: "Developed web applications using React",
                  tailored: "Built scalable React applications with TypeScript, serving 100K+ users daily",
                  reasoning: "Emphasized scale and TypeScript expertise mentioned in job requirements"
                },
                {
                  original: "Led development team",
                  tailored: "Led cross-functional team of 5 developers in agile environment, delivering 15+ features",
                  reasoning: "Highlighted team leadership and agile methodology valued by the company"
                },
                {
                  original: "Improved application performance",
                  tailored: "Optimized React application performance by 40% through code splitting and lazy loading",
                  reasoning: "Added specific metrics and technical details relevant to React role"
                }
              ]
            })
          }
        }]
      })

      const result = await service.generateResumeBulletEdits(mockCandidate, mockJob)

      expect(result.bulletEdits).toHaveLength(3)
      expect(result.bulletEdits[0]).toMatchObject({
        original: expect.any(String),
        tailored: expect.any(String),
        reasoning: expect.any(String)
      })
      expect(result.bulletEdits[0].tailored).toContain('TypeScript')
      expect(result.isAIGenerated).toBe(true)
    })

    it('should execute one-click Smart Apply flow', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      // Mock both cover letter and resume generation
      mockOpenAI.chat.completions.create
        .mockResolvedValueOnce({
          choices: [{ message: { content: 'Generated cover letter content' } }]
        })
        .mockResolvedValueOnce({
          choices: [{ message: { content: JSON.stringify({
            bulletEdits: [
              { original: 'Old bullet', tailored: 'New bullet', reasoning: 'Better fit' }
            ]
          }) } }]
        })

      const result = await service.executeSmartApply(mockCandidate, mockJob, {
        generateCoverLetter: true,
        generateResumeEdits: true,
        autoSubmit: false // Require user review
      })

      expect(result.applicationId).toBeDefined()
      expect(result.coverLetter).toBeDefined()
      expect(result.resumeEdits).toBeDefined()
      expect(result.status).toBe('draft') // Not auto-submitted
      expect(result.requiresReview).toBe(true)
      expect(result.submittedAt).toBeUndefined()
      expect(result.analyticsEvents).toContain('SmartApply_Started')
    })

    it('should track Smart Apply conversion funnel', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{ message: { content: 'Mock content' } }]
      })

      // Start Smart Apply
      const smartApplyResult = await service.executeSmartApply(mockCandidate, mockJob)
      
      // Submit application
      const submissionResult = await service.submitApplication(smartApplyResult.applicationId, {
        userEdits: {
          coverLetterEdited: true,
          resumeEdited: false
        }
      })

      expect(submissionResult.status).toBe('submitted')
      expect(submissionResult.submittedAt).toBeDefined()
      expect(submissionResult.analyticsEvents).toContain('SmartApply_Click')
      expect(submissionResult.analyticsEvents).toContain('SmartApply_Submit')
      expect(submissionResult.conversionMetrics.timeToSubmit).toBeGreaterThan(0)
    })
  })

  describe('ðŸ”´ RED: Performance & Rate Limiting', () => {
    it('should complete cover letter generation under 10 seconds', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{ message: { content: 'Fast generated content' } }]
      })

      const startTime = Date.now()
      await service.generateCoverLetter(mockCandidate, mockJob)
      const duration = Date.now() - startTime

      expect(duration).toBeLessThan(10000)
    })

    it('should respect rate limiting for concurrent requests', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{ message: { content: 'Content' } }]
      })

      const promises = Array.from({ length: 10 }, () =>
        service.generateCoverLetter(mockCandidate, mockJob)
      )

      const startTime = Date.now()
      await Promise.all(promises)
      const duration = Date.now() - startTime

      // Should take longer due to rate limiting
      expect(duration).toBeGreaterThan(1000)
    })

    it('should cache generated content for cost optimization', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{ message: { content: 'Cached content' } }]
      })

      // First request - should hit API
      const result1 = await service.generateCoverLetter(mockCandidate, mockJob)
      
      // Second request - should use cache
      const result2 = await service.generateCoverLetter(mockCandidate, mockJob)

      expect(mockOpenAI.chat.completions.create).toHaveBeenCalledTimes(1)
      expect(result1.coverLetter).toBe(result2.coverLetter)
      expect(result2.fromCache).toBe(true)
    })
  })

  describe('ðŸ”´ RED: Error Handling & Security', () => {
    it('should handle OpenAI API failures gracefully', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      mockOpenAI.chat.completions.create.mockRejectedValue(new Error('OpenAI API Error'))

      await expect(
        service.generateCoverLetter(mockCandidate, mockJob)
      ).rejects.toThrow('Smart Apply service temporarily unavailable')
    })

    it('should sanitize and validate AI-generated content', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{
          message: {
            content: 'Dear <script>alert("xss")</script>Hiring Manager, I am excited to apply...'
          }
        }]
      })

      const result = await service.generateCoverLetter(mockCandidate, mockJob)

      expect(result.coverLetter).not.toContain('<script>')
      expect(result.coverLetter).toContain('Dear Hiring Manager')
      expect(result.contentFlags.containedHTML).toBe(true)
      expect(result.contentFlags.sanitized).toBe(true)
    })

    it('should enforce content length limits', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      const longContent = 'A'.repeat(10000) // Very long content
      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{ message: { content: longContent } }]
      })

      const result = await service.generateCoverLetter(mockCandidate, mockJob)

      expect(result.coverLetter.length).toBeLessThanOrEqual(2000) // Max cover letter length
      expect(result.contentFlags.truncated).toBe(true)
    })

    it('should label all AI-generated content clearly', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{ message: { content: 'AI generated content without label' } }]
      })

      const result = await service.generateCoverLetter(mockCandidate, mockJob)

      expect(result.coverLetter).toMatch(/Generated by JobGenie AI|Suggested by JobGenie AI/)
      expect(result.disclaimerAdded).toBe(true)
    })
  })

  describe('ðŸ”´ RED: Analytics & Instrumentation', () => {
    it('should track all required analytics events', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      mockOpenAI.chat.completions.create.mockResolvedValue({
        choices: [{ message: { content: 'Content' } }]
      })

      const analyticsEvents: string[] = []
      const mockAnalytics = {
        track: vi.fn((event: string) => analyticsEvents.push(event))
      }

      service.setAnalytics(mockAnalytics)

      await service.executeSmartApply(mockCandidate, mockJob)

      expect(analyticsEvents).toContain('SmartApply_Click')
      expect(mockAnalytics.track).toHaveBeenCalledWith('SmartApply_Click', expect.objectContaining({
        userId: mockCandidate.userId,
        jobId: mockJob.id,
        timestamp: expect.any(String)
      }))
    })

    it('should provide anonymization options for analytics', async () => {
      const mockJob = createMockJob()
      const mockCandidate = createMockCandidate()

      const result = await service.getAnalyticsData(mockCandidate.userId, {
        anonymize: true,
        includePersonalData: false
      })

      expect(result.userId).toMatch(/^anon_\w+/) // Anonymized ID
      expect(result.events.every(event => !event.personalData)).toBe(true)
      expect(result.aggregatedMetrics).toBeDefined()
    })
  })

  // Helper functions
  function createMockJob(): Job {
    return {
      id: 'job-123',
      title: 'Senior React Developer',
      company: {
        name: 'TechCorp',
        size: 'medium',
        industry: 'Technology'
      },
      location: {
        city: 'Lusaka',
        country: 'Zambia',
        remote: true
      },
      requirements: [
        '5+ years React experience',
        'TypeScript proficiency',
        'Team leadership experience'
      ],
      skills: ['React', 'TypeScript', 'JavaScript', 'Node.js'],
      description: 'We are looking for a Senior React Developer to join our growing team. You will be responsible for building scalable web applications using React and TypeScript.',
      source: 'jobgenie',
      sourceId: 'job-123',
      isActive: true,
      createdAt: '2025-01-19T10:00:00Z',
      updatedAt: '2025-01-19T10:00:00Z'
    }
  }

  function createMockCandidate(): CandidateProfile {
    return {
      id: 'candidate-123',
      userId: 'user-123',
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@example.com',
      headline: 'Senior React Developer',
      summary: 'Experienced React developer with 5+ years of experience building scalable web applications.',
      location: {
        city: 'Lusaka',
        country: 'Zambia',
        timezone: 'Africa/Lusaka',
        remotePreference: 'flexible',
        willingToRelocate: true
      },
      experience: [
        {
          id: '1',
          company: 'StartupXYZ',
          position: 'Senior React Developer',
          description: 'Led development of React applications serving 100K+ users',
          startDate: '2020-01-01',
          endDate: '2024-01-01',
          isCurrent: false,
          skills: ['React', 'TypeScript', 'Node.js'],
          achievements: ['Migrated codebase to TypeScript', 'Reduced runtime errors by 40%'],
          remote: true
        }
      ],
      education: [
        {
          id: '1',
          institution: 'University of Zambia',
          degree: 'Bachelor of Science',
          field: 'Computer Science',
          startDate: '2016-01-01',
          endDate: '2020-01-01',
          achievements: ['Graduated with honors']
        }
      ],
      skills: [
        { name: 'React', level: 'expert', yearsOfExperience: 5, endorsed: true, endorsements: 15 },
        { name: 'TypeScript', level: 'advanced', yearsOfExperience: 3, endorsed: true, endorsements: 10 }
      ],
      certifications: [],
      languages: [{ name: 'English', proficiency: 'native' }],
      portfolio: [],
      preferences: {
        jobTypes: ['full-time'],
        industries: ['Technology'],
        salaryExpectations: [{
          min: 80000,
          max: 120000,
          currency: 'USD',
          period: 'annually',
          negotiable: true
        }],
        remotePreference: 'flexible',
        availabilityDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        willingToRelocate: true,
        preferredCompanySizes: ['medium', 'large']
      },
      visibility: {
        profileVisible: true,
        searchable: true,
        showSalaryExpectations: true,
        showContactInfo: false,
        allowRecruiterContact: true,
        blockedRecruiters: [],
        blockedCompanies: []
      },
      lastActive: new Date().toISOString(),
      isActive: true,
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: new Date().toISOString()
    }
  }
})
